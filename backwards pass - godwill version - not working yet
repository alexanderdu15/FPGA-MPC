`timescale 1ns/1ps

module backward_pass #(
  parameter int STATE_DIM   = 12,
  parameter int CONTROL_DIM = 4,
  parameter int W           = 16
)(
  input  wire                         clk,
  input  wire                         reset,
  input  wire                         start,

  // flattened inputs
  input  wire signed [W*STATE_DIM-1:0]       p_next_flat,
  input  wire signed [W*CONTROL_DIM-1:0]     r_k_flat,
  input  wire signed [W*STATE_DIM-1:0]       q_k_flat,
  input  wire signed [W*STATE_DIM*CONTROL_DIM-1:0] B_flat,
  input  wire signed [W*CONTROL_DIM*CONTROL_DIM-1:0] C1_flat,
  input  wire signed [W*STATE_DIM*STATE_DIM-1:0]     C2_flat,
  input  wire signed [W*CONTROL_DIM*STATE_DIM-1:0]   Kinf_flat,

  // flattened outputs
  output wire signed [W*CONTROL_DIM-1:0]   d_k_flat,
  output wire signed [W*STATE_DIM-1:0]     p_out_flat,

  output reg                              done
);

  // unpacked locals
  logic signed [W-1:0] p_next   [STATE_DIM];
  logic signed [W-1:0] r_k      [CONTROL_DIM];
  logic signed [W-1:0] q_k      [STATE_DIM];
  logic signed [W-1:0] B_mat    [STATE_DIM][CONTROL_DIM];
  logic signed [W-1:0] C1_mat   [CONTROL_DIM][CONTROL_DIM];
  logic signed [W-1:0] C2_mat   [STATE_DIM][STATE_DIM];
  logic signed [W-1:0] Kinf     [CONTROL_DIM][STATE_DIM];

  // intermediate wide accumulators
  logic signed [2*W-1:0] bt_p   [CONTROL_DIM];
  logic signed [2*W-1:0] t1     [CONTROL_DIM];
  logic signed [2*W-1:0] d_calc [CONTROL_DIM];

  logic signed [2*W-1:0] c2_p   [STATE_DIM];
  logic signed [2*W-1:0] kt_r   [STATE_DIM];
  logic signed [2*W-1:0] p_calc [STATE_DIM];

  // registered outputs
  logic signed [W-1:0]    d_k    [CONTROL_DIM];
  logic signed [W-1:0]    p_out  [STATE_DIM];

  // 1) Unpack flats
  always_comb begin
    for (int i = 0; i < STATE_DIM;   i++) p_next[i] = p_next_flat[i*W +: W];
    for (int i = 0; i < CONTROL_DIM; i++) r_k[i]    = r_k_flat[i*W +: W];
    for (int i = 0; i < STATE_DIM;   i++) q_k[i]    = q_k_flat[i*W +: W];

    for (int i = 0; i < STATE_DIM;   i++)
      for (int j = 0; j < CONTROL_DIM; j++)
        B_mat[i][j] = B_flat[(i*CONTROL_DIM + j)*W +: W];

    for (int i = 0; i < CONTROL_DIM; i++)
      for (int j = 0; j < CONTROL_DIM; j++)
        C1_mat[i][j] = C1_flat[(i*CONTROL_DIM + j)*W +: W];

    for (int i = 0; i < STATE_DIM;   i++)
      for (int j = 0; j < STATE_DIM;   j++)
        C2_mat[i][j] = C2_flat[(i*STATE_DIM + j)*W +: W];

    for (int i = 0; i < CONTROL_DIM; i++)
      for (int j = 0; j < STATE_DIM;   j++)
        Kinf[i][j] = Kinf_flat[(i*STATE_DIM + j)*W +: W];
  end

  // 2) Combinational Riccati update
  always_comb begin
    // Bᵀ·p_next + r_k
    for (int i = 0; i < CONTROL_DIM; i++) begin
      bt_p[i] = '0;
      for (int j = 0; j < STATE_DIM; j++)
        bt_p[i] += B_mat[j][i] * p_next[j];
      t1[i] = bt_p[i] + {{W{r_k[i][W-1]}}, r_k[i]};
    end

    // d_calc = C1 * t1
    for (int i = 0; i < CONTROL_DIM; i++) begin
      d_calc[i] = '0;
      for (int k = 0; k < CONTROL_DIM; k++)
        d_calc[i] += C1_mat[i][k] * t1[k];
    end

    // C2·p_next and Kinfᵀ·r_k
    for (int i = 0; i < STATE_DIM; i++) begin
      c2_p[i] = '0;
      for (int j = 0; j < STATE_DIM; j++)
        c2_p[i] += C2_mat[i][j] * p_next[j];

      kt_r[i] = '0;
      for (int k = 0; k < CONTROL_DIM; k++)
        kt_r[i] += Kinf[k][i] * r_k[k];
    end

    // p_calc = q_k + c2_p - kt_r
    for (int i = 0; i < STATE_DIM; i++)
      p_calc[i] = {{W{q_k[i][W-1]}}, q_k[i]} + c2_p[i] - kt_r[i];
  end

  // 3) Register on start
  always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
      for (int i = 0; i < CONTROL_DIM; i++) d_k[i]   <= '0;
      for (int i = 0; i < STATE_DIM;   i++) p_out[i] <= '0;
      done <= 1'b0;
    end
    else if (start) begin
      for (int i = 0; i < CONTROL_DIM; i++)
        d_k[i] <= d_calc[i][W-1:0];
      for (int i = 0; i < STATE_DIM;   i++)
        p_out[i] <= p_calc[i][W-1:0];
      done <= 1'b1;
    end
    else done <= 1'b0;
  end

  // 4) Pack back via continuous assigns
  generate
    genvar gi;
    for (gi = 0; gi < CONTROL_DIM; gi++) begin : PACK_D
      assign d_k_flat[gi*W +: W] = d_k[gi];
    end
    for (gi = 0; gi < STATE_DIM; gi++) begin : PACK_P
      assign p_out_flat[gi*W +: W] = p_out[gi];
    end
  endgenerate

endmodule
