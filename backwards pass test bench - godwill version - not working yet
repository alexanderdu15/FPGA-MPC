`timescale 1ns/1ps

module backward_pass_tb;
  parameter int STATE_DIM   = 12;
  parameter int CONTROL_DIM = 4;
  parameter int W           = 16;

  logic                          clk, reset, start, done;
  logic signed [W-1:0]           p_next   [STATE_DIM];
  logic signed [W-1:0]           r_k      [CONTROL_DIM];
  logic signed [W-1:0]           q_k      [STATE_DIM];
  logic signed [W-1:0]           B_mat    [STATE_DIM][CONTROL_DIM];
  logic signed [W-1:0]           C1_mat   [CONTROL_DIM][CONTROL_DIM];
  logic signed [W-1:0]           C2_mat   [STATE_DIM][STATE_DIM];
  logic signed [W-1:0]           Kinf     [CONTROL_DIM][STATE_DIM];

  logic signed [W-1:0]           d_k      [CONTROL_DIM];
  logic signed [W-1:0]           p_out    [STATE_DIM];

  // Instantiate DUT
  backward_pass #(
    .STATE_DIM(STATE_DIM),
    .CONTROL_DIM(CONTROL_DIM),
    .W(W)
  ) dut (
    .clk     (clk),
    .reset   (reset),
    .start   (start),
    .p_next  (p_next),
    .r_k     (r_k),
    .q_k     (q_k),
    .B_mat   (B_mat),
    .C1_mat  (C1_mat),
    .C2_mat  (C2_mat),
    .Kinf    (Kinf),
    .d_k     (d_k),
    .p_out   (p_out),
    .done    (done)
  );

  // Clock
  initial clk = 0;
  always #5 clk = ~clk;

  initial begin
    integer i, j;
    // Reset and start
    reset = 1; start = 0;
    #20;
    reset = 0;

    // Initialize vectors
    for (i = 0; i < STATE_DIM; i++) begin
      p_next[i] = i + 1;     // [1,2,3,...,12]
      q_k[i]    = 0;
    end
    for (i = 0; i < CONTROL_DIM; i++)
      r_k[i] = 1;

    // B_mat = identity on first CONTROL_DIM rows
    for (i = 0; i < STATE_DIM; i++)
      for (j = 0; j < CONTROL_DIM; j++)
        B_mat[i][j] = (i < CONTROL_DIM && i == j) ? 1 : 0;

    // C1_mat = identity
    for (i = 0; i < CONTROL_DIM; i++)
      for (j = 0; j < CONTROL_DIM; j++)
        C1_mat[i][j] = (i == j) ? 1 : 0;

    // C2_mat = identity
    for (i = 0; i < STATE_DIM; i++)
      for (j = 0; j < STATE_DIM; j++)
        C2_mat[i][j] = (i == j) ? 1 : 0;

    // Kinf = zeros (so Kinfáµ€ * r_k = 0)
    for (i = 0; i < CONTROL_DIM; i++)
      for (j = 0; j < STATE_DIM; j++)
        Kinf[i][j] = 0;

    // Pulse start
    #10 start = 1;
    #10 start = 0;

    // Wait for completion
    wait(done);

    // Display results
    $display("--- d_k (feedforward) ---");
    for (i = 0; i < CONTROL_DIM; i++)
      $display("d_k[%0d] = %0d", i, d_k[i]);

    $display("--- p_out (linear term) ---");
    for (i = 0; i < STATE_DIM; i++)
      $display("p_out[%0d] = %0d", i, p_out[i]);

    #20 $finish;
  end
endmodule
